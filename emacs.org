#+title: Emacs configuration
#+author: Arnav Andrew Jose

This emacs config was originally for my work system.
I opted to start afresh and not copy over any
configuration from my personal machine(s).
It is now my primary configuration.
I am trying to keep it as minimalist and
low-fuss as possible.

* Before loading Init.el
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/early-init.el
  :END:

** Disabling package.el and using straight.el instead
  #+begin_src emacs-lisp
    ;; source: https://github.com/crmsnbleyd/dotfiles
    (setq package-enable-at-startup nil)
  #+end_src

* Personal elisp functions
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/lisp/functions.el :mkdirp yes
  :END:
  These might not be that useful for your specific use-case
** Enable lexical-binding
#+begin_src  emacs-lisp
  ;;; functions.el --- a simple package  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2023  Drew Jose

  ;; Author: Drew Jose <arnav.jose@gmail.com>
  ;; Keywords: lisp
  ;; Version: 0.0.1

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Convenience functions for me

  ;;; Code:
  (require 'subr-x)
  (require 'monkeytype)
#+end_src

** Complete for eshell history in minibuffer (good with vertico)
#+begin_src emacs-lisp
  ;;;###autoload
  (defun functions/eshell-history-complete ()
    (interactive)
    (let ((to-input (completing-read
	     "Eshell history: "
	     (delete-dups
	      (ring-elements eshell-history-ring)))))
      (end-of-line)
      (eshell-kill-input)
      (insert to-input)))
#+end_src

** Pelican helpers
~pelican-initalise-file~ even works with subdirectories!
#+begin_src emacs-lisp
  ;;;###autoload
  (defun functions/pelican-metadata-insert ()
    (interactive)
    (let
	((date-string (format-time-string "%Y-%m-%d %H:%M"))
	 (slug (string-remove-suffix ".md" (buffer-name))))
      (insert
       (format
	"Title:
  Date: %s
  Modified: %s
  Tags:
  Category:
  Slug: %s
  Authors:
  Status: draft
  Summary:"
	date-string date-string slug))))

  ;;;###autoload
  (defun functions/pelican-initialise-file (slug)
    (interactive "sEnter slug of post: ")
    (let ((pelican-content-dir "~/writing/blog/content"))
      (find-file
       (expand-file-name (format "%s.md" slug)
			 pelican-content-dir))
      (functions/pelican-metadata-insert)))
#+end_src
** Load some words for monkeytype
#+begin_src emacs-lisp
  (defun functions/monkeytype-load-and-start (arg &optional file-name num-words)
    (interactive "p")
    (when (/= arg 1)
      (setf file-name (read-file-name "Insert name of file with words: "))
      (setf num-words (read-number "Insert number of words you require: " 50)))

    (let ((res '())
	  (final-buffer "*Monkeytype-words*")
	  (true-num-words (or num-words 50))
	  (num-buffer-words nil)
	  (indices nil))

      (with-temp-buffer
	(insert-file-contents
	 (or file-name
	     (expand-file-name
	      "wikipedia2k.txt"
	      "~/.monkeytype")))

	(setq num-buffer-words
	      (count-words
	       (point-min)
	       (point-max)))
	(setq indices
	      (sort
	       (cl-loop for i from 0 below true-num-words
			collect
			(random (- num-buffer-words i)))
	       '<))
	(setq res
	      (cl-loop repeat true-num-words
		       for idx in indices
		       collect
		       (progn
			 (goto-char (point-min))
			 (forward-word idx)
			 (let ((word-to-return
				(string-trim
				 (buffer-substring-no-properties
				  (point)
				  (progn (forward-word) (point))))))
			   (kill-word -1)
			   word-to-return)))))

      (with-current-buffer (get-buffer-create final-buffer)
	(erase-buffer)
	(insert (mapconcat 'identity res " ")))
      (switch-to-buffer final-buffer)
      (monkeytype-buffer)))
#+end_src

** Provide package
#+begin_src  emacs-lisp
  (provide 'functions)
  ;;; functions.el ends here
#+end_src
* Emacs config
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/init.el
  :END:

** Enable lexical-binding and add link to repo
#+begin_src  emacs-lisp
  ;; -*- lexical-binding: t -*-
  ;; source: https://github.com/crmsnbleyd/dotfiles
#+end_src
** Using convenience functions
#+begin_src emacs-lisp
  (use-package functions
    :commands
    (functions/eshell-history-complete
     functions/monkeytype-load-and-start
     functions/pelican-metadata-insert
     functions/pelican-initialise-file)
    :ensure nil
    :load-path "lisp")
#+end_src
** Using straight.el
Bootstrapping it, installing use-package and then
setting straight as the package manager for use-package.

  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 6))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    ;; Install use-package if not bundled
    (when (version< emacs-version "29.0")
      (straight-use-package 'use-package))

    ;; use-package will use straight.el by default
    (use-package straight
      :custom
      (straight-use-package-by-default t))
  #+end_src

** Avy and undo-fu
undo-fu for vi-like undo and redo functionality

avy for tree-like jump to marks : [[https://github.com/abo-abo/avy][Avy project page]]
#+begin_src  emacs-lisp
  (use-package undo-fu
    :straight
    (undo-fu :type git :host github :repo "emacsmirror/undo-fu")
    :bind
    (("C-z" . undo-fu-only-undo)
     ("C-S-z" . undo-fu-only-redo))
    :custom
    (evil-undo-system 'undo-fu))

  (use-package avy
    :bind ("C-c C-;" . avy-goto-char-2)
    :custom
    (avy-keys '(?a ?s ?f ?j ?k ?l ?z ?x ?c)))
#+end_src

** Combobulate
Paredit + Tree-sitter! [[https://github.com/mickeynp/combobulate][Github]]
#+begin_src emacs-lisp
  (use-package combobulate
    :when (treesit-available-p)
    :straight (combobulate
	       :type git
	       :host github
	       :repo "mickeynp/combobulate")
    :hook
    ((go-ts-mode python-ts-mode yaml-ts-mode)
     . combobulate-mode))
#+end_src
** Completion and hide-show minor mode
z-c is hide-show close and z-o is hide-show open
#+begin_src emacs-lisp
  (use-package hideshow
    :hook (prog-mode . hs-minor-mode))

  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `global-corfu-modes'.
    :init
    (global-corfu-mode))
#+end_src
** Doom-modeline
Modern and pretty modeline. Does not work well in TUI.
Run ~nerd-icons-install-fonts~ to install the required pretty
icons on your system (unless you wish to disable them)
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))
#+end_src
** Exec path to reflect shell PATH variable
Otherwise we have to resort to silly hacks.
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :when (or (memq window-system'(mac ns x))
	    (daemonp))
  :config (exec-path-from-shell-initialize))
#+end_src
** Themes
I made this theme!
#+begin_src emacs-lisp
  (use-package flexoki-themes
      :config (load-theme 'flexoki-themes-light t))
#+end_src
** Learning to touch type
[[https://github.com/jpablobr/emacs-monkeytype][Monkeytype]]
#+begin_src emacs-lisp
  (use-package monkeytype
    :defer t)
#+end_src
** Magit (git porcelain)
[[https://magit.vc][Magit home page]]

#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :bind ("C-x g" . magit-status))
#+end_src
** Meow modal editing
#+begin_src emacs-lisp
  (use-package meow
    :config
    (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
    (meow-setup)
    (meow-global-mode 1))
#+end_src
** Move text with M-shift-up/down
#+begin_src emacs-lisp
  (use-package move-text
    :bind
    (("M-S-<up>" . move-text-up)
     ("M-S-<down>" . move-text-down)))
#+end_src
** Org mode
#+begin_src emacs-lisp
  (use-package org
    :straight nil
    :bind
    (:map org-mode-map
	  ("C-c l" . org-store-link))
    :config
    (setq org-agenda-files
	  `(,(expand-file-name "org-agenda" "~/Documents"))))
#+end_src
*** Org Babel load all languages when needed
Do not need to add any languages needed one-by-one. This slows down loading org files a bit.
[[https://emacs.stackexchange.com/questions/20577/org-babel-load-all-languages-on-demand][Stack Exchange answer used as source]]
#+begin_src emacs-lisp
  (defadvice org-babel-execute-src-block (around load-language nil activate)
    "Load language if needed."
    (let ((language (org-element-property :language (org-element-at-point))))
      (unless (cdr (assoc (intern language) org-babel-load-languages))
	(add-to-list 'org-babel-load-languages (cons (intern language) t))
	(org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
      ad-do-it))
#+end_src
** Rainbow delimiters
Really necessary for legibility of code blocks.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    ((prog-mode . rainbow-delimiters-mode)))
#+end_src
** Reading .epub books in Emacs
#+begin_src emacs-lisp
  (use-package nov-mode
    :straight
    (nov
     :type git :host nil
     :repo "https://depp.brause.cc/nov.el.git")
    :init
    (when (fboundp 'evil-set-initial-state)
      (evil-set-initial-state 'nov-mode 'emacs))
    :mode "\\.epub\\'")
#+end_src
** Reading PDFs in Emacs
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :hook
    (pdf-view-mode .
     (lambda () (display-line-numbers-mode 0))))
#+end_src
** Ripgrep with emacs
#+begin_src emacs-lisp
  (use-package deadgrep
    :bind
    (("<f5>" . deadgrep)))
#+end_src
** Smart parentheses
#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :bind
    ("C-M-S-a" . sp-beginning-of-sexp)
    ("C-M-S-e" . sp-end-of-sexp)
    ("C-M-S-p" . sp-previous-sexp)
    :config
    (require 'smartparens-config))
#+end_src
** Vertico
Buffer completion and vertical listing of options.
Savehist so vertico knows the last command used.
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    :config
    (setq completion-styles '(basic substring partial-completion flex)
	  read-file-name-completion-ignore-case t
	  read-buffer-completion-ignore-case t
	  completion-ignore-case t
	  vertico-cycle t))

  ;; Persist history over Emacs restarts.
  ;; Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))
#+end_src
** Yasnippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config
    (when (fboundp 'evil-leader/set-key)
      (evil-leader/set-key
	"i s" 'yas-insert-snippet)))

  (use-package yasnippet-snippets
    :after (yasnippet))
#+end_src
** Programming and markup languages support
Feel free to disable any languages you don't require by simply
running ~org-cut-subtree~ on the heading before exporting
*** Common Lisp (Sly)
#+begin_src emacs-lisp
  (use-package sly
    :defer t
    :config
    (setq-default sly-symbol-completion-mode nil)
    (setq org-babel-lisp-eval-fn #'sly-eval)
    (add-hook 'sly-mrepl-hook
	      (lambda ()
		(define-key sly-mrepl-mode-map
			    (kbd "M-r")
			    'comint-history-isearch-backward)))
    (setq inferior-lisp-program "sbcl"))
#+end_src
*** Go mode
#+begin_src emacs-lisp
  ;; install gopls lsp server
  (use-package go-ts-mode
    :when (fboundp 'treesit-install-language-grammar)
    :mode "\\.go\\'"
    :hook ((go-ts-mode . eglot-ensure)))
#+end_src
*** Haskell mode
Will move to tree-sitter later
#+begin_src emacs-lisp
  (use-package haskell-mode
    :straight (haskell-mode
	       :type git
	       :host github
	       :repo "haskell/haskell-mode")
    :mode "\\.hs\\'"
    :hook ((haskell-mode . eglot-ensure)
	   (haskell-mode . interactive-haskell-mode)))
#+end_src
*** HTML/CSS snippets (Emmet)
#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook ((sgml-mode css-mode)))
#+end_src
*** Jenkinsfile mode
#+begin_src emacs-lisp
  (use-package jenkinsfile-mode
    :defer t)
#+end_src
*** Markdown mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode "\\.md\\'")
#+end_src
*** Nix mode
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src
*** Python
Elpy functionality without elpy overhead.
#+begin_src emacs-lisp
  (use-package python-ts-mode
    :straight nil
    :when (fboundp 'treesit-install-language-grammar)
    :mode "\\.py\\'"
    :hook ((python-ts-mode . eglot-ensure))
    :config
    (setq python-interpreter "python3"))

  (use-package pyvenv
   :after (python-ts-mode))

  (use-package python-black
   :after (python-ts-mode))
#+end_src
*** Rust mode
#+begin_src emacs-lisp
  (use-package rust-ts-mode
    :straight nil
    :when (fboundp 'treesit-install-language-grammar)
    :mode "\\.rs\\'"
    :hook ((rust-ts-mode . eglot-ensure)))
#+end_src
*** Terraform mode
[[https://github.com/hcl-emacs/terraform-mode][Github page]]
#+begin_src emacs-lisp
  (use-package terraform-mode
    :mode "\\.tf\\'"
    :hook (terraform-mode . outline-minor-mode))
#+end_src
*** Uiua mode
An array language still in beta. I am working on the emacs mode currently.
#+begin_src emacs-lisp
  (use-package uiua-ts-mode
    :mode "\\.ua\\'")
#+end_src
*** Yaml mode
#+begin_src emacs-lisp
  (use-package yaml-ts-mode
    :when (fboundp 'treesit-install-language-grammar)
    :bind (:map yaml-ts-mode-map
		("C-m" . newline-and-indent))
    :mode "\\.ya?ml\\'")
#+end_src
** General emacs configuration
Removing menu bar, toolbar and scroll bar, which I don't really use, and binding C-x C-b to ibuffer, which is really pretty and nice.
#+begin_src emacs-lisp
  (use-package emacs
    :init
    (put 'dired-find-alternate-file 'disabled nil)
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,]
    ;; if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    (add-hook 'eshell-mode-hook (lambda () (display-line-numbers-mode 0)))
    (add-hook 'org-agenda-mode-hook (lambda () (display-line-numbers-mode 0)))
    ;; (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode 0)))

    :bind
    (([remap list-buffers] . ibuffer)
      ;; https://www.masteringemacs.org/article/text-expansion-hippie-expand
     ([remap dabbrev-expand] . hippie-expand)
     ("C-<tab>" . dabbrev-completion))

    :config
    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete)
    (setq-default use-short-answers t)
    (setq enable-recursive-minibuffers t)
    (setq ispell-program-name "aspell")
    (setq treesit-extra-load-path '("/usr/local/lib/tree-sitter"))
    (setq bookmark-save-flag 1)
    (windmove-default-keybindings)
    ;; use Meta+Space to escape insert mode
    (global-set-key (kbd "M-SPC") (kbd "<escape>")) 
    (global-display-line-numbers-mode)
    (pixel-scroll-precision-mode 1)
    (unless (eq system-type 'darwin)
      (menu-bar-mode -1))
    (scroll-bar-mode -1)
    (tool-bar-mode -1))
#+end_src
