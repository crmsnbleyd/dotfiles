#+title: Emacs configuration
#+author: Arnav Andrew Jose

This emacs config is for my work system.
I have opted to start afresh and not copy over any
configuration from my personal machine(s).
I would like to try keeping this as minimalist and
low-fuss as possible.

* Tree-sitter libraries
Building and moving tree sitter libraries to /usr/local/lib/tree-sitter/
Simply execute the source block if you please.
#+begin_src bash
  git clone git@github.com:casouri/tree-sitter-module.git
  cd tree-sitter-module
  ./batch.sh
  mv dist tree-sitter
  mv tree-sitter /usr/local/lib/
  cd -
#+end_src
* Before loading Init.el
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/early-init.el
  :END:

** Disabling package.el and using straight.el instead
  #+begin_src emacs-lisp
    ;; source: https://github.com/crmsnbleyd/dotfiles
    (setq package-enable-at-startup nil)
  #+end_src

* Elisp functions
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/init.el
  :END:
** Enable lexical-binding and add link to repo
#+begin_src  emacs-lisp
  ;; -*- lexical-binding: t -*-
  ;; source: https://github.com/crmsnbleyd/dotfiles
#+end_src

** Complete for eshell history in minibuffer (good with vertico)
#+begin_src emacs-lisp
  (defun eshell-history-complete ()
    (interactive)
    (let ((to-input (completing-read
	     "Eshell history: "
	     (delete-dups
	      (ring-elements eshell-history-ring)))))
      (end-of-line)
      (eshell-kill-input)
      (insert to-input)))
#+end_src

* Emacs config
  :PROPERTIES:
  :header-args: :tangle ~/.emacs.d/init.el
  :END:

** Using straight.el

Bootstrapping it, installing use-package and then
setting straight as the package manager for use-package.

  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 6))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    ;; Install use-package if not bundled
    (when (version< emacs-version "29.0")
      (straight-use-package 'use-package))

    ;; use-package will use straight.el by default
    (use-package straight
      :custom
      (straight-use-package-by-default t))
  #+end_src

** Org Babel load all languages when needed
Do not need to add any languages needed one-by-one.
[[https://emacs.stackexchange.com/questions/20577/org-babel-load-all-languages-on-demand][Stack Exchange answer used as source]]
#+begin_src emacs-lisp
  (defadvice org-babel-execute-src-block (around load-language nil activate)
    "Load language if needed."
    (let ((language (org-element-property :language (org-element-at-point))))
      (unless (cdr (assoc (intern language) org-babel-load-languages))
	(add-to-list 'org-babel-load-languages (cons (intern language) t))
	(org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
      ad-do-it))
#+end_src
** Completion and hide-show minor mode
z-c is hide-show close and z-o is hide-show open
#+begin_src emacs-lisp
  (use-package company
    :hook
    ((emacs-lisp-mode lisp-mode haskell-mode
		      go-ts-mode org-mode
		      python-mode sly-mrepl-mode) . company-mode )
    ((emacs-lisp-mode go-ts-mode haskell-mode
		      lisp-mode python-mode) . hs-minor-mode )
    :custom
    (company-idle-delay 0))

  (use-package company-posframe
   :after (company)
   :init
   (company-posframe-mode 1))
#+end_src
** Combobulate
Paredit + Tree-sitter! [[https://github.com/mickeynp/combobulate][Github]]
#+begin_src emacs-lisp
  (use-package combobulate
    :when (treesit-available-p)
    :straight (combobulate
	       :type git
	       :host github
	       :repo "mickeynp/combobulate")
    :hook ((yaml-ts-mode) . combobulate-mode))
#+end_src
** Doom-themes and doom-modeline
Install doom-themes, enable bold and italics, and load a theme from the package

Install and enable doom-modeline. Does not work well in TUI.
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-material-dark t))

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
** Emmet support
#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook ((sgml-mode css-mode)))
#+end_src
** Evil setup
evil-mode initializes on startup.

evil-escape simulates <ESC> key in non-normal states
when pressing 'evil-escape-key-sequence.

evil-leader works in motion and normal states.
Press <leader> and the set-key to use the function.

undo-fu for vi-like undo and redo functionality

avy for tree-like jump to marks : [[https://github.com/abo-abo/avy][Avy project page]]
#+begin_src  emacs-lisp
  (use-package evil
    :init (evil-mode)
    :config
    (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
    (evil-define-key nil eshell-mode-map (kbd "M-r") #'eshell-history-complete)
    :custom
    (evil-move-beyond-eol t))

  (use-package evil-escape
    :after (evil)
    :config
    (evil-escape-mode)
    :custom
    (evil-escape-key-sequence "jk")
    (evil-escape-delay 0.2))

  (use-package evil-leader
    :after (evil)
    :config
    (global-evil-leader-mode t)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "." 'find-file
      ";" 'comment-or-uncomment-region
      "c y" 'company-yasnippet
      "d x w" 'delete-trailing-whitespace
      "f s" 'save-buffer
      "p f" 'forward-sexp
      "p b" 'backward-sexp
      "p u" 'sp-up-sexp
      "p d" 'sp-down-sexp))

  (use-package evil-surround
    :after (evil)
    :config (global-evil-surround-mode))

  (use-package undo-fu
    :straight
    (undo-fu :type git :host github :repo "emacsmirror/undo-fu")
    :bind
    (("C-z" . undo-fu-only-undo)
     ("C-S-z" . undo-fu-only-redo))
    :custom
    (evil-undo-system 'undo-fu))

  (use-package avy
    :bind
    (:map evil-normal-state-map
	  ("g s s" . avy-goto-char-2))
    :custom
    (avy-keys '(?a ?s ?f ?j ?k ?l ?z ?x ?c)))
#+end_src

** Elpy
Python IDE features (I do not prefer using LSP). Using advice for lazy loading, can just use (elpy-enable) instead.
#+begin_src emacs-lisp
(use-package elpy
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable))
#+end_src
** Go mode
#+begin_src emacs-lisp
  ;; install gopls lsp server 
  (use-package go-ts-mode
    :when (treesit-available-p)
    :mode "\\.go\\'"
    :hook ((go-ts-mode . eglot-ensure)))
#+end_src
** Haskell mode
Will move to tree-sitter later
#+begin_src emacs-lisp
  (use-package haskell-mode
    :straight (haskell-mode
	       :type git
	       :host github
	       :repo "haskell/haskell-mode")
    :mode "\\.hs\\'"
    :hook ((haskell-mode . eglot-ensure)
	   (haskell-mode . interactive-haskell-mode)))
#+end_src
** Magit (git porcelain)
[[https://magit.vc][Magit home page]]

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+end_src
** Move text with M-shift-up/down
#+begin_src emacs-lisp
  (use-package move-text
    :bind
    (("M-S-<up>" . move-text-up)
     ("M-S-<down>" . move-text-down)))
#+end_src
** Nix mode
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src
** Rainbow delimiters
Really necessary for legibility of code blocks.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    ((prog-mode . rainbow-delimiters-mode)))
#+end_src
** Sly for Common Lisp
#+begin_src emacs-lisp
  (use-package sly
    :defer t
    :config
    (setq org-babel-lisp-eval-fn #'sly-eval)
    (setq inferior-lisp-program "/usr/local/bin/sbcl"))
#+end_src
** Smart parentheses
#+begin_src emacs-lisp
(use-package smartparens
  :hook (prog-mode . smartparens-mode)
  :init
  (require 'smartparens-config))
#+end_src
** Terraform mode
[[https://github.com/hcl-emacs/terraform-mode][Github page]]
#+begin_src emacs-lisp
  (use-package terraform-mode
    :mode "\\.tf\\'"
    :hook (terraform-mode . outline-minor-mode))
#+end_src
** Vertico
Buffer completion and vertical listing of options.
Savehist so vertico knows the last command used.
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    :config
    (setq completion-styles '(basic substring partial-completion flex)
	  read-file-name-completion-ignore-case t
	  read-buffer-completion-ignore-case t
	  completion-ignore-case t
	  vertico-cycle t))


  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))
#+end_src
** Yaml mode
#+begin_src emacs-lisp
  (use-package yaml-ts-mode
    :when (treesit-available-p)
    :bind (:map yaml-ts-mode-map
		("C-m" . newline-and-indent))
    :mode "\\.ya?ml\\'")
#+end_src
** Yasnippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode))

  (use-package yasnippet-snippets)
#+end_src
** General emacs configuration
Removing menu bar, toolbar and scroll bar, which I don't really use, and binding C-x C-b to ibuffer, which is really pretty and nice.
#+begin_src emacs-lisp
  (use-package emacs
    :init
    (put 'dired-find-alternate-file 'disabled nil)
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    (add-hook 'eshell-mode-hook (lambda () (display-line-numbers-mode 0)))
    (add-hook 'org-agenda-mode-hook (lambda () (display-line-numbers-mode 0)))
    ;; (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode 0)))

    (setq enable-recursive-minibuffers t)
    (setq-default use-short-answers t)

    :bind
    (("C-x C-b" . ibuffer))

    :config
    (setq ispell-program-name "aspell")
    (setq treesit-extra-load-path '("/usr/local/lib/tree-sitter"))
    (setq org-agenda-files (list (expand-file-name "org-agenda" "~/Documents")))
    (windmove-default-keybindings)
    (add-hook 'org-mode-hook
	      (lambda ()
		(define-key
		 org-mode-map
		 (kbd "C-c l")
		 'org-store-link)))
    (global-display-line-numbers-mode)
    (unless (eq system-type 'darwin)
      (menu-bar-mode -1))
    (scroll-bar-mode -1)
    (tool-bar-mode -1))
#+end_src
